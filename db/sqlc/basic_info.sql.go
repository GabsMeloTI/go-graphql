// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: basic_info.sql

package db

import (
	"context"
	"database/sql"
)

const createBasicInfo = `-- name: CreateBasicInfo :one
INSERT INTO public.basic_info
(id, first_name, last_name, additional_name, pronouns, head_line)
VALUES(nextval('basic_info_id_seq'::regclass), $1, $2, $3, $4, $5)
    RETURNING id, first_name, last_name, additional_name, pronouns, head_line
`

type CreateBasicInfoParams struct {
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	AdditionalName sql.NullString `json:"additional_name"`
	Pronouns       sql.NullString `json:"pronouns"`
	HeadLine       sql.NullString `json:"head_line"`
}

func (q *Queries) CreateBasicInfo(ctx context.Context, arg CreateBasicInfoParams) (BasicInfo, error) {
	row := q.db.QueryRowContext(ctx, createBasicInfo,
		arg.FirstName,
		arg.LastName,
		arg.AdditionalName,
		arg.Pronouns,
		arg.HeadLine,
	)
	var i BasicInfo
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.AdditionalName,
		&i.Pronouns,
		&i.HeadLine,
	)
	return i, err
}

const updateBasicInfo = `-- name: UpdateBasicInfo :exec
UPDATE public.basic_info
SET first_name=$1, last_name=$2, additional_name=$3, pronouns=$4, head_line=$5
WHERE id=$6
`

type UpdateBasicInfoParams struct {
	FirstName      string         `json:"first_name"`
	LastName       string         `json:"last_name"`
	AdditionalName sql.NullString `json:"additional_name"`
	Pronouns       sql.NullString `json:"pronouns"`
	HeadLine       sql.NullString `json:"head_line"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateBasicInfo(ctx context.Context, arg UpdateBasicInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateBasicInfo,
		arg.FirstName,
		arg.LastName,
		arg.AdditionalName,
		arg.Pronouns,
		arg.HeadLine,
		arg.ID,
	)
	return err
}
